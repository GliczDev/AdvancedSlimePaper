From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: kyngs <kyngs@users.noreply.github.com>
Date: Sat, 6 Jan 2024 22:23:55 +0100
Subject: [PATCH] Add migration from SRF 1-8 Not production ready, needs
 fixing.


diff --git a/src/main/java/com/infernalsuite/aswm/SimpleDataFixerConverter.java b/src/main/java/com/infernalsuite/aswm/SimpleDataFixerConverter.java
index ca4a80e7b5c73f9669a717adc46b2e9b8c1f48b6..8fb76b97e36c5f0eb154293fe8d6ad2fe10fd130 100644
--- a/src/main/java/com/infernalsuite/aswm/SimpleDataFixerConverter.java
+++ b/src/main/java/com/infernalsuite/aswm/SimpleDataFixerConverter.java
@@ -1,5 +1,6 @@
 package com.infernalsuite.aswm;
 
+import ca.spottedleaf.dataconverter.converters.DataConverter;
 import ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry;
 import ca.spottedleaf.dataconverter.minecraft.walkers.generic.WalkerUtils;
 import ca.spottedleaf.dataconverter.types.nbt.NBTMapType;
@@ -30,18 +31,21 @@ class SimpleDataFixerConverter implements SlimeWorldReader<SlimeWorld> {
             return data;
         }
 
+        long encodedNewVersion = DataConverter.encodeVersions(newVersion, Integer.MAX_VALUE);
+        long encodedCurrentVersion = DataConverter.encodeVersions(currentVersion, Integer.MAX_VALUE);
+
         Map<com.infernalsuite.aswm.ChunkPos, SlimeChunk> chunks = new HashMap<>();
         for (SlimeChunk chunk : data.getChunkStorage()) {
             List<CompoundTag> entities = new ArrayList<>();
             List<CompoundTag> blockEntities = new ArrayList<>();
             for (CompoundTag upgradeEntity : chunk.getTileEntities()) {
                 blockEntities.add(
-                        convertAndBack(upgradeEntity, (tag) -> MCTypeRegistry.TILE_ENTITY.convert(new NBTMapType(tag), currentVersion, newVersion))
+                        convertAndBack(upgradeEntity, (tag) -> MCTypeRegistry.TILE_ENTITY.convert(new NBTMapType(tag), encodedCurrentVersion, encodedNewVersion))
                 );
             }
             for (CompoundTag upgradeEntity : chunk.getEntities()) {
                 entities.add(
-                        convertAndBack(upgradeEntity, (tag) -> MCTypeRegistry.ENTITY.convert(new NBTMapType(tag), currentVersion, newVersion))
+                        convertAndBack(upgradeEntity, (tag) -> MCTypeRegistry.ENTITY.convert(new NBTMapType(tag), encodedCurrentVersion, encodedNewVersion))
                 );
             }
 
@@ -53,11 +57,11 @@ class SimpleDataFixerConverter implements SlimeWorldReader<SlimeWorld> {
                 if (dataSection == null) continue;
 
                 com.flowpowered.nbt.CompoundTag blockStateTag = blockStateTag = convertAndBack(dataSection.getBlockStatesTag(), (tag) -> {
-                    WalkerUtils.convertList(MCTypeRegistry.BLOCK_STATE, new NBTMapType(tag), "palette", currentVersion, newVersion);
+                    WalkerUtils.convertList(MCTypeRegistry.BLOCK_STATE, new NBTMapType(tag), "palette", encodedCurrentVersion, encodedNewVersion);
                 });
 
                 com.flowpowered.nbt.CompoundTag biomeTag = convertAndBack(dataSection.getBiomeTag(), (tag) -> {
-                    WalkerUtils.convertList(MCTypeRegistry.BIOME, new NBTMapType(tag), "palette", currentVersion, newVersion);
+                    WalkerUtils.convertList(MCTypeRegistry.BIOME, new NBTMapType(tag), "palette", encodedCurrentVersion, encodedNewVersion);
                 });
 
                 sections[i] = new SlimeChunkSectionSkeleton(
diff --git a/src/main/java/com/infernalsuite/aswm/SlimeNMSBridgeImpl.java b/src/main/java/com/infernalsuite/aswm/SlimeNMSBridgeImpl.java
index 21c3ea3596a1f954618348afae2b2f7f058393d1..18f0f7933c42a7609a3d7bd775b24c372baae175 100644
--- a/src/main/java/com/infernalsuite/aswm/SlimeNMSBridgeImpl.java
+++ b/src/main/java/com/infernalsuite/aswm/SlimeNMSBridgeImpl.java
@@ -1,5 +1,8 @@
 package com.infernalsuite.aswm;
 
+import ca.spottedleaf.dataconverter.converters.DataConverter;
+import ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry;
+import ca.spottedleaf.dataconverter.types.nbt.NBTMapType;
 import com.flowpowered.nbt.CompoundMap;
 import com.infernalsuite.aswm.api.SlimeNMSBridge;
 import com.infernalsuite.aswm.api.world.SlimeWorld;
@@ -9,7 +12,6 @@ import com.infernalsuite.aswm.level.SlimeBootstrap;
 import com.infernalsuite.aswm.level.SlimeInMemoryWorld;
 import com.infernalsuite.aswm.level.SlimeLevelInstance;
 import com.mojang.serialization.Lifecycle;
-import net.kyori.adventure.util.Services;
 import net.minecraft.SharedConstants;
 import net.minecraft.core.registries.Registries;
 import net.minecraft.nbt.CompoundTag;
@@ -76,6 +78,20 @@ public class SlimeNMSBridgeImpl implements SlimeNMSBridge {
         return container;
     }
 
+    @Override
+    public com.flowpowered.nbt.CompoundTag convertChunkTo1_13(com.flowpowered.nbt.CompoundTag tag) {
+        CompoundTag converted = (CompoundTag) Converter.convertTag(tag);
+
+        int version = converted.getInt("DataVersion");
+
+        long encodedNewVersion = DataConverter.encodeVersions(1624, Integer.MAX_VALUE);
+        long encodedCurrentVersion = DataConverter.encodeVersions(version, Integer.MAX_VALUE);
+
+        MCTypeRegistry.CHUNK.convert(new NBTMapType(converted), encodedCurrentVersion, encodedNewVersion);
+
+        return (com.flowpowered.nbt.CompoundTag) Converter.convertTag(tag.getName(), converted);
+    }
+
     @Override
     public boolean loadOverworldOverride() {
         if (defaultWorld == null) {
@@ -166,7 +182,6 @@ public class SlimeNMSBridgeImpl implements SlimeNMSBridge {
         return DATA_FIXER_CONVERTER.readFromData(world);
     }
 
-
     @Override
     public int getCurrentVersion() {
         return SharedConstants.getCurrentVersion().getDataVersion().getVersion();
