From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Paul19988 <paul@paulcodes.co.uk>
Date: Sun, 11 Jun 2023 17:19:05 +0100
Subject: [PATCH] poi data loader


diff --git a/src/main/java/com/infernalsuite/aswm/level/ChunkDataLoadTask.java b/src/main/java/com/infernalsuite/aswm/level/ChunkDataLoadTask.java
index 41e652b568598926e838e81fdc338e51f8e97ef8..3980d993f5d441587675a0f07cda6416aebab96d 100644
--- a/src/main/java/com/infernalsuite/aswm/level/ChunkDataLoadTask.java
+++ b/src/main/java/com/infernalsuite/aswm/level/ChunkDataLoadTask.java
@@ -14,6 +14,7 @@ import net.minecraft.world.level.chunk.ChunkAccess;
 import net.minecraft.world.level.chunk.ImposterProtoChunk;
 import net.minecraft.world.level.chunk.LevelChunk;
 import net.minecraft.world.level.chunk.UpgradeData;
+import net.minecraft.world.level.chunk.storage.ChunkSerializer;
 import net.minecraft.world.level.material.Fluid;
 import net.minecraft.world.ticks.LevelChunkTicks;
 import org.slf4j.Logger;
@@ -63,7 +64,7 @@ public final class ChunkDataLoadTask implements CommonLoadTask {
     }
 
     protected ChunkAccess runOnMain(final SlimeChunk data) {
-        final PoiChunk poiChunk = this.chunkLoadTask.chunkHolder.getPoiChunk();
+        final PoiChunk poiChunk = this.world.chunkTaskScheduler.chunkHolderManager.getPoiChunkIfLoaded(this.chunkX, this.chunkZ, true);
         if (poiChunk == null) {
             LOGGER.error("Expected poi chunk to be loaded with chunk for task " + this.toString());
         } else {
diff --git a/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java b/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java
index 7da17001d9f676c906e94bcfaaeafc0a1668d210..06d78da89f557ba0786b0261c33c74660e6ff661 100644
--- a/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java
+++ b/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java
@@ -1,6 +1,9 @@
 package net.minecraft.world.level.chunk.storage;
 
 import com.google.common.collect.Maps;
+import com.infernalsuite.aswm.api.world.SlimeWorld;
+import com.infernalsuite.aswm.level.NMSSlimeWorld;
+import com.infernalsuite.aswm.level.SlimeLevelInstance;
 import com.mojang.logging.LogUtils;
 import com.mojang.serialization.Codec;
 import com.mojang.serialization.DataResult;
@@ -138,6 +141,7 @@ public class ChunkSerializer {
     public static ProtoChunk read(ServerLevel world, PoiManager poiStorage, ChunkPos chunkPos, CompoundTag nbt) {
         // Paper start - rewrite chunk system
         InProgressChunkHolder holder = readInProgressChunkHolder(world, poiStorage, chunkPos, nbt);
+
         return holder.protoChunk;
     }
 
@@ -251,6 +255,10 @@ public class ChunkSerializer {
                     flag = false;
                 }
                 // Paper end - rewrite light engine
+
+                if(world instanceof SlimeLevelInstance) {
+                    poiStorage.checkConsistencyWithBlocks(SectionPos.of(chunkPos.getWorldPosition()), achunksection[j]);
+                }
             }
         }
 
